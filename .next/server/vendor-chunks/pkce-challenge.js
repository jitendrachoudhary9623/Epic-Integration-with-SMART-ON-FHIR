"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pkce-challenge";
exports.ids = ["vendor-chunks/pkce-challenge"];
exports.modules = {

/***/ "(ssr)/./node_modules/pkce-challenge/dist/index.node.js":
/*!********************************************************!*\
  !*** ./node_modules/pkce-challenge/dist/index.node.js ***!
  \********************************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(__webpack_module__, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ pkceChallenge),\n/* harmony export */   generateChallenge: () => (/* binding */ generateChallenge),\n/* harmony export */   verifyChallenge: () => (/* binding */ verifyChallenge)\n/* harmony export */ });\nlet crypto;\ncrypto =\n    globalThis.crypto?.webcrypto ?? // Node.js 16 REPL has globalThis.crypto as node:crypto\n        globalThis.crypto ?? // Node.js 18+ \n        (await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! node:crypto */ \"node:crypto\", 19))).webcrypto; // Node.js 16 non-REPL\n/**\n * Creates an array of length `size` of random bytes\n * @param size\n * @returns Array of random ints (0 to 255)\n */\nfunction getRandomValues(size) {\n    return crypto.getRandomValues(new Uint8Array(size));\n}\n/** Generate cryptographically strong random string\n * @param size The desired length of the string\n * @returns The random string\n */\nfunction random(size) {\n    const mask = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-._~\";\n    let result = \"\";\n    const randomUints = getRandomValues(size);\n    for (let i = 0; i < size; i++) {\n        // cap the value of the randomIndex to mask.length - 1\n        const randomIndex = randomUints[i] % mask.length;\n        result += mask[randomIndex];\n    }\n    return result;\n}\n/** Generate a PKCE challenge verifier\n * @param length Length of the verifier\n * @returns A random verifier `length` characters long\n */\nfunction generateVerifier(length) {\n    return random(length);\n}\n/** Generate a PKCE code challenge from a code verifier\n * @param code_verifier\n * @returns The base64 url encoded code challenge\n */\nasync function generateChallenge(code_verifier) {\n    const buffer = await crypto.subtle.digest(\"SHA-256\", new TextEncoder().encode(code_verifier));\n    // Generate base64url string\n    // btoa is deprecated in Node.js but is used here for web browser compatibility\n    // (which has no good replacement yet, see also https://github.com/whatwg/html/issues/6811)\n    return btoa(String.fromCharCode(...new Uint8Array(buffer)))\n        .replace(/\\//g, '_')\n        .replace(/\\+/g, '-')\n        .replace(/=/g, '');\n}\n/** Generate a PKCE challenge pair\n * @param length Length of the verifer (between 43-128). Defaults to 43.\n * @returns PKCE challenge pair\n */\nasync function pkceChallenge(length) {\n    if (!length)\n        length = 43;\n    if (length < 43 || length > 128) {\n        throw `Expected a length between 43 and 128. Received ${length}.`;\n    }\n    const verifier = generateVerifier(length);\n    const challenge = await generateChallenge(verifier);\n    return {\n        code_verifier: verifier,\n        code_challenge: challenge,\n    };\n}\n/** Verify that a code_verifier produces the expected code challenge\n * @param code_verifier\n * @param expectedChallenge The code challenge to verify\n * @returns True if challenges are equal. False otherwise.\n */\nasync function verifyChallenge(code_verifier, expectedChallenge) {\n    const actualChallenge = await generateChallenge(code_verifier);\n    return actualChallenge === expectedChallenge;\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } }, 1);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGtjZS1jaGFsbGVuZ2UvZGlzdC9pbmRleC5ub2RlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNEhBQXFCLGFBQWE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsVUFBVTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLE9BQU87QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3BhdGllbnQtYXBwLy4vbm9kZV9tb2R1bGVzL3BrY2UtY2hhbGxlbmdlL2Rpc3QvaW5kZXgubm9kZS5qcz82ZjEyIl0sInNvdXJjZXNDb250ZW50IjpbImxldCBjcnlwdG87XG5jcnlwdG8gPVxuICAgIGdsb2JhbFRoaXMuY3J5cHRvPy53ZWJjcnlwdG8gPz8gLy8gTm9kZS5qcyAxNiBSRVBMIGhhcyBnbG9iYWxUaGlzLmNyeXB0byBhcyBub2RlOmNyeXB0b1xuICAgICAgICBnbG9iYWxUaGlzLmNyeXB0byA/PyAvLyBOb2RlLmpzIDE4KyBcbiAgICAgICAgKGF3YWl0IGltcG9ydChcIm5vZGU6Y3J5cHRvXCIpKS53ZWJjcnlwdG87IC8vIE5vZGUuanMgMTYgbm9uLVJFUExcbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBsZW5ndGggYHNpemVgIG9mIHJhbmRvbSBieXRlc1xuICogQHBhcmFtIHNpemVcbiAqIEByZXR1cm5zIEFycmF5IG9mIHJhbmRvbSBpbnRzICgwIHRvIDI1NSlcbiAqL1xuZnVuY3Rpb24gZ2V0UmFuZG9tVmFsdWVzKHNpemUpIHtcbiAgICByZXR1cm4gY3J5cHRvLmdldFJhbmRvbVZhbHVlcyhuZXcgVWludDhBcnJheShzaXplKSk7XG59XG4vKiogR2VuZXJhdGUgY3J5cHRvZ3JhcGhpY2FsbHkgc3Ryb25nIHJhbmRvbSBzdHJpbmdcbiAqIEBwYXJhbSBzaXplIFRoZSBkZXNpcmVkIGxlbmd0aCBvZiB0aGUgc3RyaW5nXG4gKiBAcmV0dXJucyBUaGUgcmFuZG9tIHN0cmluZ1xuICovXG5mdW5jdGlvbiByYW5kb20oc2l6ZSkge1xuICAgIGNvbnN0IG1hc2sgPSBcImFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVowMTIzNDU2Nzg5LS5fflwiO1xuICAgIGxldCByZXN1bHQgPSBcIlwiO1xuICAgIGNvbnN0IHJhbmRvbVVpbnRzID0gZ2V0UmFuZG9tVmFsdWVzKHNpemUpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2l6ZTsgaSsrKSB7XG4gICAgICAgIC8vIGNhcCB0aGUgdmFsdWUgb2YgdGhlIHJhbmRvbUluZGV4IHRvIG1hc2subGVuZ3RoIC0gMVxuICAgICAgICBjb25zdCByYW5kb21JbmRleCA9IHJhbmRvbVVpbnRzW2ldICUgbWFzay5sZW5ndGg7XG4gICAgICAgIHJlc3VsdCArPSBtYXNrW3JhbmRvbUluZGV4XTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbi8qKiBHZW5lcmF0ZSBhIFBLQ0UgY2hhbGxlbmdlIHZlcmlmaWVyXG4gKiBAcGFyYW0gbGVuZ3RoIExlbmd0aCBvZiB0aGUgdmVyaWZpZXJcbiAqIEByZXR1cm5zIEEgcmFuZG9tIHZlcmlmaWVyIGBsZW5ndGhgIGNoYXJhY3RlcnMgbG9uZ1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVZlcmlmaWVyKGxlbmd0aCkge1xuICAgIHJldHVybiByYW5kb20obGVuZ3RoKTtcbn1cbi8qKiBHZW5lcmF0ZSBhIFBLQ0UgY29kZSBjaGFsbGVuZ2UgZnJvbSBhIGNvZGUgdmVyaWZpZXJcbiAqIEBwYXJhbSBjb2RlX3ZlcmlmaWVyXG4gKiBAcmV0dXJucyBUaGUgYmFzZTY0IHVybCBlbmNvZGVkIGNvZGUgY2hhbGxlbmdlXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUNoYWxsZW5nZShjb2RlX3ZlcmlmaWVyKSB7XG4gICAgY29uc3QgYnVmZmVyID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5kaWdlc3QoXCJTSEEtMjU2XCIsIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZShjb2RlX3ZlcmlmaWVyKSk7XG4gICAgLy8gR2VuZXJhdGUgYmFzZTY0dXJsIHN0cmluZ1xuICAgIC8vIGJ0b2EgaXMgZGVwcmVjYXRlZCBpbiBOb2RlLmpzIGJ1dCBpcyB1c2VkIGhlcmUgZm9yIHdlYiBicm93c2VyIGNvbXBhdGliaWxpdHlcbiAgICAvLyAod2hpY2ggaGFzIG5vIGdvb2QgcmVwbGFjZW1lbnQgeWV0LCBzZWUgYWxzbyBodHRwczovL2dpdGh1Yi5jb20vd2hhdHdnL2h0bWwvaXNzdWVzLzY4MTEpXG4gICAgcmV0dXJuIGJ0b2EoU3RyaW5nLmZyb21DaGFyQ29kZSguLi5uZXcgVWludDhBcnJheShidWZmZXIpKSlcbiAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnXycpXG4gICAgICAgIC5yZXBsYWNlKC9cXCsvZywgJy0nKVxuICAgICAgICAucmVwbGFjZSgvPS9nLCAnJyk7XG59XG4vKiogR2VuZXJhdGUgYSBQS0NFIGNoYWxsZW5nZSBwYWlyXG4gKiBAcGFyYW0gbGVuZ3RoIExlbmd0aCBvZiB0aGUgdmVyaWZlciAoYmV0d2VlbiA0My0xMjgpLiBEZWZhdWx0cyB0byA0My5cbiAqIEByZXR1cm5zIFBLQ0UgY2hhbGxlbmdlIHBhaXJcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gcGtjZUNoYWxsZW5nZShsZW5ndGgpIHtcbiAgICBpZiAoIWxlbmd0aClcbiAgICAgICAgbGVuZ3RoID0gNDM7XG4gICAgaWYgKGxlbmd0aCA8IDQzIHx8IGxlbmd0aCA+IDEyOCkge1xuICAgICAgICB0aHJvdyBgRXhwZWN0ZWQgYSBsZW5ndGggYmV0d2VlbiA0MyBhbmQgMTI4LiBSZWNlaXZlZCAke2xlbmd0aH0uYDtcbiAgICB9XG4gICAgY29uc3QgdmVyaWZpZXIgPSBnZW5lcmF0ZVZlcmlmaWVyKGxlbmd0aCk7XG4gICAgY29uc3QgY2hhbGxlbmdlID0gYXdhaXQgZ2VuZXJhdGVDaGFsbGVuZ2UodmVyaWZpZXIpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvZGVfdmVyaWZpZXI6IHZlcmlmaWVyLFxuICAgICAgICBjb2RlX2NoYWxsZW5nZTogY2hhbGxlbmdlLFxuICAgIH07XG59XG4vKiogVmVyaWZ5IHRoYXQgYSBjb2RlX3ZlcmlmaWVyIHByb2R1Y2VzIHRoZSBleHBlY3RlZCBjb2RlIGNoYWxsZW5nZVxuICogQHBhcmFtIGNvZGVfdmVyaWZpZXJcbiAqIEBwYXJhbSBleHBlY3RlZENoYWxsZW5nZSBUaGUgY29kZSBjaGFsbGVuZ2UgdG8gdmVyaWZ5XG4gKiBAcmV0dXJucyBUcnVlIGlmIGNoYWxsZW5nZXMgYXJlIGVxdWFsLiBGYWxzZSBvdGhlcndpc2UuXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiB2ZXJpZnlDaGFsbGVuZ2UoY29kZV92ZXJpZmllciwgZXhwZWN0ZWRDaGFsbGVuZ2UpIHtcbiAgICBjb25zdCBhY3R1YWxDaGFsbGVuZ2UgPSBhd2FpdCBnZW5lcmF0ZUNoYWxsZW5nZShjb2RlX3ZlcmlmaWVyKTtcbiAgICByZXR1cm4gYWN0dWFsQ2hhbGxlbmdlID09PSBleHBlY3RlZENoYWxsZW5nZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pkce-challenge/dist/index.node.js\n");

/***/ })

};
;