"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/api.ts":
/*!************************!*\
  !*** ./src/lib/api.ts ***!
  \************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchPatientAppointments: function() { return /* binding */ fetchPatientAppointments; },\n/* harmony export */   fetchPatientData: function() { return /* binding */ fetchPatientData; },\n/* harmony export */   fetchPatientEncounters: function() { return /* binding */ fetchPatientEncounters; },\n/* harmony export */   fetchPatientLabReports: function() { return /* binding */ fetchPatientLabReports; },\n/* harmony export */   fetchPatientMedications: function() { return /* binding */ fetchPatientMedications; },\n/* harmony export */   fetchPatientProcedures: function() { return /* binding */ fetchPatientProcedures; },\n/* harmony export */   fetchPatientVitals: function() { return /* binding */ fetchPatientVitals; }\n/* harmony export */ });\nconst FHIR_BASE_URL = \"https://fhir.epic.com/interconnect-fhir-oauth/api/FHIR/R4\" || 0;\nconst fetchPatientData = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/Patient/\").concat(patientId), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient data\");\n    }\n    return response.json();\n};\nconst fetchPatientMedications = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/MedicationRequest?patient=\").concat(patientId, \"&status=active&_sort=-date&_count=10\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient medications\");\n    }\n    const data = await response.json();\n    return data.entry ? data.entry.map((e)=>e.resource) : [];\n};\nconst fetchPatientVitals = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/Observation?patient=\").concat(patientId, \"&category=vital-signs&_sort=-date&_count=10\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient vitals\");\n    }\n    const data = await response.json();\n    return data.entry ? data.entry.map((e)=>e.resource) : [];\n};\nconst fetchPatientAppointments = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/Appointment?patient=\").concat(patientId, \"&status=booked\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient appointments\");\n    }\n    return response.json();\n};\n// Add more API functions as needed for your application\nconst fetchPatientLabReports = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/Observation?patient=\").concat(patientId, \"&category=laboratory&_sort=-date&_count=10\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient lab reports\");\n    }\n    const data = await response.json();\n    return data.entry ? data.entry.map((e)=>e.resource) : [];\n};\nconst fetchPatientEncounters = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/Encounter?patient=\").concat(patientId, \"&_sort=-date&_count=10\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient encounters\");\n    }\n    const data = await response.json();\n    return data.entry ? data.entry.map((e)=>e.resource) : [];\n};\nconst fetchPatientProcedures = async (patientId, accessToken)=>{\n    const response = await fetch(\"\".concat(FHIR_BASE_URL, \"/Procedure?patient=\").concat(patientId, \"&_sort=-date&_count=10\"), {\n        headers: {\n            \"Authorization\": \"Bearer \".concat(accessToken),\n            \"Accept\": \"application/fhir+json\"\n        }\n    });\n    if (!response.ok) {\n        throw new Error(\"Failed to fetch patient procedures\");\n    }\n    const data = await response.json();\n    return data.entry ? data.entry.map((e)=>e.resource) : [];\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api.ts\n"));

/***/ })

});